# glog 里的一些经验:

# in: logging.cc
#####################

# 1. stop_writing:
// Write to LOG file
if ( !stop_writing ) {
}

# 2. posix_fadvise: 号称是帮助内核优化io性能的;
#ifdef OS_LINUX
if (FLAGS_drop_log_memory) {
	if (file_length_ >= logging::kPageSize) {
		// don't evict the most recent page
		uint32 len = file_length_ & ~(logging::kPageSize - 1);
		// # POSIX_FADV_DONTNEED:
		// # 	这是告诉内核, 这些数据以后不会再被使用了;
		posix_fadvise(fileno(file_), 0, len, POSIX_FADV_DONTNEED);
	}
}
#endif
注意: 是有配置的选择是否优化: FLAGS_drop_log_memory



# 3. log 文件格式:
(1) 文件名长度: 256
	# // The logfile's filename will have the date/time & pid in it
	char time_pid_string[256];  // More than enough chars for time, pid, \0

(2) 文件名组成: <base_filename>.<time_pid_string>
	其中:
	(1) base_filename:
		<program name>.<hostname>.<user name>.log.<severity level>.<pidstring>
	(2) time_pid_string: yyyymmdd-HHMMSS.mainpid
		其中:
		<1> yyyymmdd-HHMMSS 是该文件创建时的时间;
		<2> mainpid 是进程号, 在 main 之前的全局变量初始化时 mainpid = getpid(); 取得;

	eg: (1) signalhandler_unittest.dev32.root.log.INFO.20120215-142846.908
		(2) webserver.examplehost.root.log.INFO.19990817-150000.4354
	* 同时 log 尝试建立一个 <procname>.<severity> 的连接指向最新创建的log文件以方便使用

考虑:
	(1) hostname: 用ip代替;


(3) 文件头: 每个log文件的头部都会在初始化的时候，添加一些头部信息来说明这个log的内容:
eg:
Log file created at: 2012/02/15 14:28:46 
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg 
Running on machine: dev32


# 4. 致命信号的处理 (主要功能是用了一些很复杂的手段把运行时的堆栈记录下来了):
(1) 涉及的信号量:
// We'll install the failure signal handler for these signals.  We could
// use strsignal() to get signal names, but we don't use it to avoid    
// introducing yet another #ifdef complication.                         
//                                                                      
// The list should be synced with the comment in signalhandler.h.       
// # google 认为以下信号量是致命信号, 需要在log中记录下产生该信号的堆栈信息;
const struct {                                                          
	int number;                                                           
	const char *name;                                                     
} kFailureSignals[] = {                                                 
	{ SIGSEGV, "SIGSEGV" },                                               
	{ SIGILL, "SIGILL" },                                                 
	{ SIGFPE, "SIGFPE" },                                                 
	{ SIGABRT, "SIGABRT" },                                               
	{ SIGBUS, "SIGBUS" },                                                 
	{ SIGTERM, "SIGTERM" },                                               
};

(2) 使用接口: InstallFailureSignalHandler (signalhandler.cc)
	eg: InstallFailureSignalHandler(); // # 注册/开启 `FailureSignal` 的处理函数;

(3) 实现: FailureSignalHandler (signalhandler.cc)
# 注意: 相当复杂
# 而且其中包含不可重入的写入文件的操作 (会导致不可预期的程序卡死)

考虑:
(1) 可以在信号处理时记录, 同时提供一个dump的接口给业务自己在适当的时候调用 (通常是退出信号处理后), 但这样的处理在正常重启时没什么用, 而当程序coredump的时候可以写到自己独有的一个文件中;



# x. 一些接口 (utilities.cc):
(1) static const int64 kPageSize = getpagesize();
(2) GetHostName (用 uname(2) 实现);
(3) GetHex (symbolize.cc); // # 把一个文本的 16进制字符串 转换成对应的十进制整数;
(4) # // 运行fn, 直到fn不再因 EINTR返回 时结束;
	#define NO_INTR(fn)   do {} while ((fn) < 0 && errno == EINTR)
(5) strsignal (); // # 获取信号量的字符串;


# 附: glog 的 Write 函数 (logging.cc):
void LogFileObject::Write(bool force_flush,                                            
                          time_t timestamp,                                            
                          const char* message,                                         
                          int message_len) {                                           
  MutexLock l(&lock_);                                                                 
                                                                                       
  // We don't log if the base_name_ is "" (which means "don't write")                  
  if (base_filename_selected_ && base_filename_.empty()) {                             
    return;                                                                            
  }                                                                                    
                                                                                       
  if (static_cast<int>(file_length_ >> 20) >= MaxLogSize() ||                          
      PidHasChanged()) {                                                               
    if (file_ != NULL) fclose(file_);                                                  
    file_ = NULL;                                                                      
    file_length_ = bytes_since_flush_ = 0;                                             
    rollover_attempt_ = kRolloverAttemptFrequency-1;                                   
  }                                                                                    
                                                                                       
  // If there's no destination file, make one before outputting                        
  if (file_ == NULL) {                                                                 
    // Try to rollover the log file every 32 log messages.  The only time              
    // this could matter would be when we have trouble creating the log                
    // file.  If that happens, we'll lose lots of log messages, of course!             
    if (++rollover_attempt_ != kRolloverAttemptFrequency) return;                      
    rollover_attempt_ = 0;                                                             
                                                                                       
    struct ::tm tm_time;                                                               
    localtime_r(&timestamp, &tm_time);                                                 
                                                                                       
    // The logfile's filename will have the date/time & pid in it                      
    char time_pid_string[256];  // More than enough chars for time, pid, \0            
    ostrstream time_pid_stream(time_pid_string, sizeof(time_pid_string));              
    time_pid_stream.fill('0');                                                         
    time_pid_stream << 1900+tm_time.tm_year                                            
            << setw(2) << 1+tm_time.tm_mon                                             
            << setw(2) << tm_time.tm_mday                                              
            << '-'                                                                     
            << setw(2) << tm_time.tm_hour                                              
            << setw(2) << tm_time.tm_min                                               
            << setw(2) << tm_time.tm_sec                                               
            << '.'                                                                     
            << GetMainThreadPid()                                                      
            << '\0';

    if (base_filename_selected_) {
      if (!CreateLogfile(time_pid_string)) {
        perror("Could not create log file");
        fprintf(stderr, "COULD NOT CREATE LOGFILE '%s'!\n", time_pid_string);
        return;
      }
    } else {
      // If no base filename for logs of this severity has been set, use a
      // default base filename of
      // "<program name>.<hostname>.<user name>.log.<severity level>.".  So
      // logfiles will have names like
      // webserver.examplehost.root.log.INFO.19990817-150000.4354, where
      // 19990817 is a date (1999 August 17), 150000 is a time (15:00:00),
      // and 4354 is the pid of the logging process.  The date & time reflect
      // when the file was created for output.
      //
      // Where does the file get put?  Successively try the directories
      // "/tmp", and "."
      string stripped_filename(
          glog_internal_namespace_::ProgramInvocationShortName());
      string hostname;
      GetHostName(&hostname);

      string uidname = MyUserName();
      // We should not call CHECK() here because this function can be
      // called after holding on to log_mutex. We don't want to
      // attempt to hold on to the same mutex, and get into a
      // deadlock. Simply use a name like invalid-user.
      if (uidname.empty()) uidname = "invalid-user";

      stripped_filename = stripped_filename+'.'+hostname+'.'
                          +uidname+".log."
                          +LogSeverityNames[severity_]+'.';
      // We're going to (potentially) try to put logs in several different dirs
      const vector<string> & log_dirs = GetLoggingDirectories();

      // Go through the list of dirs, and try to create the log file in each
      // until we succeed or run out of options
      bool success = false;
      for (vector<string>::const_iterator dir = log_dirs.begin();
           dir != log_dirs.end();
           ++dir) {
        base_filename_ = *dir + "/" + stripped_filename;
        if ( CreateLogfile(time_pid_string) ) {
          success = true;
          break;
        }
      }
      // If we never succeeded, we have to give up
      if ( success == false ) {
        perror("Could not create logging file");
        fprintf(stderr, "COULD NOT CREATE A LOGGINGFILE %s!", time_pid_string);
        return;
      }
    }

    // Write a header message into the log file
    char file_header_string[512];  // Enough chars for time and binary info
    ostrstream file_header_stream(file_header_string,
                                  sizeof(file_header_string));
    file_header_stream.fill('0');
    file_header_stream << "Log file created at: "
                       << 1900+tm_time.tm_year << '/'
                       << setw(2) << 1+tm_time.tm_mon << '/'
                       << setw(2) << tm_time.tm_mday
                       << ' '
                       << setw(2) << tm_time.tm_hour << ':'
                       << setw(2) << tm_time.tm_min << ':'
                       << setw(2) << tm_time.tm_sec << '\n'
                       << "Running on machine: "
                       << LogDestination::hostname() << '\n'
                       << "Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu "
                       << "threadid file:line] msg" << '\n'
                       << '\0';
    int header_len = strlen(file_header_string);
    fwrite(file_header_string, 1, header_len, file_);
    file_length_ += header_len;
    bytes_since_flush_ += header_len;
  }

  // Write to LOG file
  if ( !stop_writing ) {
    // fwrite() doesn't return an error when the disk is full, for
    // messages that are less than 4096 bytes. When the disk is full,
    // it returns the message length for messages that are less than
    // 4096 bytes. fwrite() returns 4096 for message lengths that are
    // greater than 4096, thereby indicating an error.
    errno = 0;
    fwrite(message, 1, message_len, file_);
    if ( FLAGS_stop_logging_if_full_disk &&
         errno == ENOSPC ) {  // disk full, stop writing to disk
      stop_writing = true;  // until the disk is
      return;
    } else {
      file_length_ += message_len;
      bytes_since_flush_ += message_len;
    }
  } else {
    if ( CycleClock_Now() >= next_flush_time_ )
      stop_writing = false;  // check to see if disk has free space.
    return;  // no need to flush
  }

  // See important msgs *now*.  Also, flush logs at least every 10^6 chars,
  // or every "FLAGS_logbufsecs" seconds.
  if ( force_flush ||
       (bytes_since_flush_ >= 1000000) ||
       (CycleClock_Now() >= next_flush_time_) ) {
    FlushUnlocked();
#ifdef OS_LINUX
    if (FLAGS_drop_log_memory) {
      if (file_length_ >= logging::kPageSize) {
        // don't evict the most recent page
        uint32 len = file_length_ & ~(logging::kPageSize - 1);
        posix_fadvise(fileno(file_), 0, len, POSIX_FADV_DONTNEED);
      }
    }
#endif
  }
}
